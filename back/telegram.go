package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// --- State Structs ---

type AddFAQState struct {
	Step       int
	QuestionRU string
	AnswerRU   string
	QuestionKZ string
	AnswerKZ   string
	QuestionEN string
	AnswerEN   string
	Category   string
}

type EditFAQState struct {
	ID         int
	Step       int
	QuestionRU string
	AnswerRU   string
	QuestionKZ string
	AnswerKZ   string
	QuestionEN string
	AnswerEN   string
	Category   string
}

type AddNewsState struct {
	Step     int
	TitleRU  string
	TitleKZ  string
	TitleEN  string
	Link     string
	Position int
}

type EditNewsState struct {
	ID       int
	Step     int
	TitleRU  string
	TitleKZ  string
	TitleEN  string
	Link     string
	Position int
}

type AddFeatureState struct {
	Step     int
	TitleRU  string
	TitleKZ  string
	TitleEN  string
	Position int
}

type EditFeatureState struct {
	ID       int
	Step     int
	TitleRU  string
	TitleKZ  string
	TitleEN  string
	Position int
}

// --- State Maps ---

var faqAddStates = make(map[int64]*AddFAQState)
var faqEditStates = make(map[int64]*EditFAQState)
var newsAddStates = make(map[int64]*AddNewsState)
var newsEditStates = make(map[int64]*EditNewsState)
var featureAddStates = make(map[int64]*AddFeatureState)
var featureEditStates = make(map[int64]*EditFeatureState)

// --- Bot ---

func sendMessage(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("Error sending message to chatID %d: %v", chatID, err)
	}
}

func sendMessageWithMarkdown(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	if _, err := bot.Send(msg); err != nil {
		log.Printf("Error sending markdown message to chatID %d: %v", chatID, err)
	}
}

func StartBot() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN not set")
	}
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		panic(err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			go handleUpdate(bot, update)
		}
	}
}

func handleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	defer func() {
		if r := recover(); r != nil {
			log.Printf("‚ÄºÔ∏è Panic recovered in handleUpdate: %v", r)
		}
	}()

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	if strings.HasPrefix(text, "/") {
		delete(faqAddStates, chatID)
		delete(faqEditStates, chatID)
		delete(newsAddStates, chatID)
		delete(newsEditStates, chatID)
		delete(featureAddStates, chatID)
		delete(featureEditStates, chatID)

		switch {
		case strings.HasPrefix(text, "/help"):
			sendHelpMessage(bot, chatID)
		case text == "/addfaq":
			faqAddStates[chatID] = &AddFAQState{Step: 1}
			sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å (RU):")
		case strings.HasPrefix(text, "/editfaq"):
			handleEditFAQCommand(bot, chatID, text)
		case strings.HasPrefix(text, "/deletefaq"):
			handleDeleteCommand(bot, chatID, text, "FAQ", DeleteFAQByID)
		case text == "/listfaq":
			handleListFAQs(bot, chatID)
		case strings.HasPrefix(text, "/getfaq"):
			handleGetFAQCommand(bot, chatID, text)
		case text == "/addnews":
			newsAddStates[chatID] = &AddNewsState{Step: 1}
			sendMessage(bot, chatID, "üì∞ –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (RU):")
		case strings.HasPrefix(text, "/editnews"):
			handleEditNewsCommand(bot, chatID, text)
		case strings.HasPrefix(text, "/deletenews"):
			handleDeleteCommand(bot, chatID, text, "–Ω–æ–≤–æ—Å—Ç—å", DeleteNewsByID)
		case text == "/listnews":
			handleListNews(bot, chatID)
		case strings.HasPrefix(text, "/getnews"):
			handleGetNewsCommand(bot, chatID, text)
		case text == "/addfeature":
			featureAddStates[chatID] = &AddFeatureState{Step: 1}
			sendMessage(bot, chatID, "‚ú® –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (RU):")
		case strings.HasPrefix(text, "/editfeature"):
			handleEditFeatureCommand(bot, chatID, text)
		case strings.HasPrefix(text, "/deletefeature"):
			handleDeleteCommand(bot, chatID, text, "—Ñ–∏—á—É", DeleteFeatureByID)
		case text == "/listfeatures":
			handleListFeatures(bot, chatID)
		case strings.HasPrefix(text, "/getfeature"):
			handleGetFeatureCommand(bot, chatID, text)
		case strings.HasPrefix(text, "/movefeature"):
			handleMoveFeatureCommand(bot, chatID, text)
		case strings.HasPrefix(text, "/movenews"):
			handleMoveNewsCommand(bot, chatID, text)
		}
		return
	}

	handleFSM(bot, chatID, text)
}

func handleFSM(bot *tgbotapi.BotAPI, chatID int64, text string) {
	if state, ok := faqAddStates[chatID]; ok {
		processAddFAQState(bot, chatID, text, state)
	} else if state, ok := faqEditStates[chatID]; ok {
		processEditFAQState(bot, chatID, text, state)
	} else if state, ok := newsAddStates[chatID]; ok {
		processAddNewsState(bot, chatID, text, state)
	} else if state, ok := newsEditStates[chatID]; ok {
		processEditNewsState(bot, chatID, text, state)
	} else if state, ok := featureAddStates[chatID]; ok {
		processAddFeatureState(bot, chatID, text, state)
	} else if state, ok := featureEditStates[chatID]; ok {
		processEditFeatureState(bot, chatID, text, state)
	}
}

func sendHelpMessage(bot *tgbotapi.BotAPI, chatID int64) {
	helpText := "*üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n" +
		"*–ù–æ–≤–æ—Å—Ç–∏*\n" +
		"`/addnews` üì∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n" +
		"`/editnews {id}` ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n" +
		"`/deletenews {id}` üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n" +
		"`/getnews {id}` üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID\n" +
		"`/listnews` üóÇÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n" +
		"`/movenews {id} {–Ω–æ–≤–∞—è_–ø–æ–∑–∏—Ü–∏—è}` üîÑ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n\n" +
		"*–§–∏—à–∫–∏ (features)*\n" +
		"`/addfeature` ‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏—à–∫—É\n" +
		"`/editfeature {id}` ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏—à–∫—É\n" +
		"`/deletefeature {id}` üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏—à–∫—É\n" +
		"`/listfeatures` üìÉ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏—à–µ–∫\n" +
		"`/getfeature {id}` üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏—à–∫—É –ø–æ ID\n" +
		"`/movefeature {id} {–Ω–æ–≤–∞—è_–ø–æ–∑–∏—Ü–∏—è}` üîÑ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∏—à–∫—É\n\n" +
		"*–ü—Ä–æ—á–µ–µ*\n" +
		"`/help` ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	sendMessageWithMarkdown(bot, chatID, helpText)
}

func handleDeleteCommand(bot *tgbotapi.BotAPI, chatID int64, text, entityName string, deleteFunc func(id int) error) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		sendMessage(bot, chatID, fmt.Sprintf("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /delete%s {id}", entityName))
		return
	}
	id, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, chatID, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return
	}
	err = deleteFunc(id)
	if err != nil {
		sendMessage(bot, chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ %s", entityName))
	} else {
		sendMessage(bot, chatID, fmt.Sprintf("üóëÔ∏è %s —Å ID %d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω(–∞)", entityName, id))
	}
}

// --- FAQ Handlers ---
func handleListFAQs(bot *tgbotapi.BotAPI, chatID int64) {
	faqs, err := GetAllFAQs()
	if err != nil || len(faqs) == 0 {
		sendMessage(bot, chatID, "‚ùå –°–ø–∏—Å–æ–∫ FAQ –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
		return
	}
	var msgText strings.Builder
	for _, f := range faqs {
		msgText.WriteString(fmt.Sprintf("ID: %d - %s\n", f.ID, f.QuestionRU))
	}
	sendMessage(bot, chatID, msgText.String())
}

func handleGetFAQCommand(bot *tgbotapi.BotAPI, chatID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		sendMessage(bot, chatID, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /getfaq {id}")
		return
	}
	id, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, chatID, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return
	}
	faq, err := GetFAQByID(id)
	if err != nil {
		sendMessage(bot, chatID, "‚ùå FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}
	msg := fmt.Sprintf("ID: %d\nRU: %s\nRU_A: %s\nKZ: %s\nKZ_A: %s\nEN: %s\nEN_A: %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s",
		faq.ID, faq.QuestionRU, faq.AnswerRU, faq.QuestionKZ, faq.AnswerKZ, faq.QuestionEN, faq.AnswerEN, faq.Category)
	sendMessage(bot, chatID, msg)
}

func handleEditFAQCommand(bot *tgbotapi.BotAPI, chatID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		sendMessage(bot, chatID, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /editfaq {id}")
		return
	}
	id, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, chatID, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return
	}
	faqEditStates[chatID] = &EditFAQState{ID: id, Step: 1}
	sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (RU):")
}

func processAddFAQState(bot *tgbotapi.BotAPI, chatID int64, text string, state *AddFAQState) {
	switch state.Step {
	case 1:
		state.QuestionRU = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç (RU):")
		state.Step++
	case 2:
		state.AnswerRU = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å (KZ):")
		state.Step++
	case 3:
		state.QuestionKZ = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç (KZ):")
		state.Step++
	case 4:
		state.AnswerKZ = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å (EN):")
		state.Step++
	case 5:
		state.QuestionEN = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç (EN):")
		state.Step++
	case 6:
		state.AnswerEN = text
		sendMessage(bot, chatID, "üìÇ –í–≤–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
		state.Step++
	case 7:
		state.Category = text
		_, err := AddFAQ(FAQ{
			QuestionRU: state.QuestionRU, AnswerRU: state.AnswerRU,
			QuestionKZ: state.QuestionKZ, AnswerKZ: state.AnswerKZ,
			QuestionEN: state.QuestionEN, AnswerEN: state.AnswerEN,
			Category: state.Category,
		})
		if err != nil {
			sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ FAQ")
		} else {
			sendMessage(bot, chatID, "‚úÖ FAQ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		}
		delete(faqAddStates, chatID)
	}
}

func processEditFAQState(bot *tgbotapi.BotAPI, chatID int64, text string, state *EditFAQState) {
	switch state.Step {
	case 1:
		state.QuestionRU = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç (RU):")
		state.Step++
	case 2:
		state.AnswerRU = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (KZ):")
		state.Step++
	case 3:
		state.QuestionKZ = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç (KZ):")
		state.Step++
	case 4:
		state.AnswerKZ = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (EN):")
		state.Step++
	case 5:
		state.QuestionEN = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç (EN):")
		state.Step++
	case 6:
		state.AnswerEN = text
		sendMessage(bot, chatID, "üìÇ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
		state.Step++
	case 7:
		state.Category = text
		err := UpdateFAQ(FAQ{
			ID:         state.ID,
			QuestionRU: state.QuestionRU, AnswerRU: state.AnswerRU,
			QuestionKZ: state.QuestionKZ, AnswerKZ: state.AnswerKZ,
			QuestionEN: state.QuestionEN, AnswerEN: state.AnswerEN,
			Category: state.Category,
		})
		if err != nil {
			sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ FAQ")
		} else {
			sendMessage(bot, chatID, "‚úÖ FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
		}
		delete(faqEditStates, chatID)
	}
}

// --- News Handlers & FSM ---
func handleListNews(bot *tgbotapi.BotAPI, chatID int64) {
	newsList, err := GetAllNews()
	if err != nil || len(newsList) == 0 {
		sendMessage(bot, chatID, "‚ùå –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
		return
	}
	var msg strings.Builder
	for _, n := range newsList {
		msg.WriteString(fmt.Sprintf("ID: %d | Pos: %d\nRU: %s\nKZ: %s\nEN: %s\nLink: %s\n\n",
			n.ID, n.Position, n.TitleRU, n.TitleKZ, n.TitleEN, n.Link))
	}
	sendMessage(bot, chatID, msg.String())
}

func handleGetNewsCommand(bot *tgbotapi.BotAPI, chatID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		sendMessage(bot, chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /getnews {id}")
		return
	}
	id, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, chatID, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return
	}
	news, err := GetNewsByID(id)
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}
	msg := fmt.Sprintf("ID: %d | Pos: %d\nRU: %s\nKZ: %s\nEN: %s\nLink: %s",
		news.ID, news.Position, news.TitleRU, news.TitleKZ, news.TitleEN, news.Link)
	sendMessage(bot, chatID, msg)
}

func handleEditNewsCommand(bot *tgbotapi.BotAPI, chatID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		sendMessage(bot, chatID, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /editnews {id}")
		return
	}
	id, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, chatID, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return
	}
	newsEditStates[chatID] = &EditNewsState{ID: id, Step: 1}
	sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (RU):")
}

func processAddNewsState(bot *tgbotapi.BotAPI, chatID int64, text string, state *AddNewsState) {
	switch state.Step {
	case 1:
		state.TitleRU = text
		sendMessage(bot, chatID, "üì∞ –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (KZ):")
		state.Step++
	case 2:
		state.TitleKZ = text
		sendMessage(bot, chatID, "üì∞ –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (EN):")
		state.Step++
	case 3:
		state.TitleEN = text
		sendMessage(bot, chatID, "üîó –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É:")
		state.Step++
	case 4:
		state.Link = text
		sendMessage(bot, chatID, "üì¶ –í–≤–µ–¥–∏ –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
		state.Step++
	case 5:
		pos, err := strconv.Atoi(text)
		if err != nil {
			sendMessage(bot, chatID, "‚ùó –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			return
		}
		state.Position = pos
		_, err = AddNews(News{
			TitleRU: state.TitleRU, TitleKZ: state.TitleKZ, TitleEN: state.TitleEN,
			Link: state.Link, Position: state.Position,
		})
		if err != nil {
			sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏")
		} else {
			sendMessage(bot, chatID, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
		}
		delete(newsAddStates, chatID)
	}
}

func processEditNewsState(bot *tgbotapi.BotAPI, chatID int64, text string, state *EditNewsState) {
	switch state.Step {
	case 1:
		state.TitleRU = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (KZ):")
		state.Step++
	case 2:
		state.TitleKZ = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (EN):")
		state.Step++
	case 3:
		state.TitleEN = text
		sendMessage(bot, chatID, "üîó –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:")
		state.Step++
	case 4:
		state.Link = text
		sendMessage(bot, chatID, "üì¶ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
		state.Step++
	case 5:
		pos, err := strconv.Atoi(text)
		if err != nil {
			sendMessage(bot, chatID, "‚ùó –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			return
		}
		state.Position = pos
		err = UpdateNews(News{
			ID: state.ID, TitleRU: state.TitleRU, TitleKZ: state.TitleKZ,
			TitleEN: state.TitleEN, Link: state.Link, Position: state.Position,
		})
		if err != nil {
			sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏")
		} else {
			sendMessage(bot, chatID, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
		}
		delete(newsEditStates, chatID)
	}
}

// --- Feature Handlers & FSM ---
func handleListFeatures(bot *tgbotapi.BotAPI, chatID int64) {
	features, err := GetAllFeatures()
	if err != nil || len(features) == 0 {
		sendMessage(bot, chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏—à–µ–∫")
		return
	}
	var msg strings.Builder
	for _, f := range features {
		msg.WriteString(fmt.Sprintf("ID: %d | Pos: %d\nRU: %s\nKZ: %s\nEN: %s\n\n",
			f.ID, f.Position, f.TitleRU, f.TitleKZ, f.TitleEN))
	}
	sendMessage(bot, chatID, msg.String())
}

func handleGetFeatureCommand(bot *tgbotapi.BotAPI, chatID int64, text string) {
	parts := strings.Fields(text)
	if len(parts) != 2 {
		sendMessage(bot, chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /getfeature {id}")
		return
	}
	id, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, chatID, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return
	}
	feature, err := GetFeatureByID(id)
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}
	msg := fmt.Sprintf("ID: %d | Pos: %d\nRU: %s\nKZ: %s\nEN: %s",
		feature.ID, feature.Position, feature.TitleRU, feature.TitleKZ, feature.TitleEN)
	sendMessage(bot, chatID, msg)
}

func handleEditFeatureCommand(bot *tgbotapi.BotAPI, chatID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		sendMessage(bot, chatID, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /editfeature {id}")
		return
	}
	id, err := strconv.Atoi(parts[1])
	if err != nil {
		sendMessage(bot, chatID, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return
	}
	featureEditStates[chatID] = &EditFeatureState{ID: id, Step: 1}
	sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (RU):")
}

func processAddFeatureState(bot *tgbotapi.BotAPI, chatID int64, text string, state *AddFeatureState) {
	switch state.Step {
	case 1:
		state.TitleRU = text
		sendMessage(bot, chatID, "‚ú® –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (KZ):")
		state.Step++
	case 2:
		state.TitleKZ = text
		sendMessage(bot, chatID, "‚ú® –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (EN):")
		state.Step++
	case 3:
		state.TitleEN = text
		sendMessage(bot, chatID, "üì¶ –í–≤–µ–¥–∏ –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
		state.Step++
	case 4:
		pos, err := strconv.Atoi(text)
		if err != nil {
			sendMessage(bot, chatID, "‚ùó –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			return
		}
		state.Position = pos
		_, err = AddFeature(Feature{
			TitleRU: state.TitleRU, TitleKZ: state.TitleKZ,
			TitleEN: state.TitleEN, Position: state.Position,
		})
		if err != nil {
			sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏—à–∫–∏")
		} else {
			sendMessage(bot, chatID, "‚úÖ –§–∏—à–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
		}
		delete(featureAddStates, chatID)
	}
}

func processEditFeatureState(bot *tgbotapi.BotAPI, chatID int64, text string, state *EditFeatureState) {
	switch state.Step {
	case 1:
		state.TitleRU = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (KZ):")
		state.Step++
	case 2:
		state.TitleKZ = text
		sendMessage(bot, chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (EN):")
		state.Step++
	case 3:
		state.TitleEN = text
		sendMessage(bot, chatID, "üì¶ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
		state.Step++
	case 4:
		pos, err := strconv.Atoi(text)
		if err != nil {
			sendMessage(bot, chatID, "‚ùó –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			return
		}
		state.Position = pos
		err = UpdateFeature(Feature{
			ID: state.ID, TitleRU: state.TitleRU, TitleKZ: state.TitleKZ,
			TitleEN: state.TitleEN, Position: state.Position,
		})
		if err != nil {
			sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏—à–∫–∏")
		} else {
			sendMessage(bot, chatID, "‚úÖ –§–∏—à–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
		}
		delete(featureEditStates, chatID)
	}
}

// --- –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏—á–∏ –Ω–∞ –¥—Ä—É–≥—É—é –ø–æ–∑–∏—Ü–∏—é ---
func handleMoveFeatureCommand(bot *tgbotapi.BotAPI, chatID int64, text string) {
	parts := strings.Fields(text)
	if len(parts) != 3 {
		sendMessage(bot, chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /movefeature {id} {–Ω–æ–≤–∞—è_–ø–æ–∑–∏—Ü–∏—è}")
		return
	}
	id, err1 := strconv.Atoi(parts[1])
	newPos, err2 := strconv.Atoi(parts[2])
	if err1 != nil || err2 != nil {
		sendMessage(bot, chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è")
		return
	}

	var currentPos int
	err := DB.QueryRow(context.Background(), `SELECT position FROM features WHERE id = $1`, id).Scan(&currentPos)
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	if newPos == currentPos {
		sendMessage(bot, chatID, "‚ÑπÔ∏è –§–∏—à–∫–∞ —É–∂–µ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏")
		return
	}

	tx, err := DB.Begin(context.Background())
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}
	defer tx.Rollback(context.Background())

	var query string
	if newPos < currentPos {
		query = `UPDATE features SET position = position + 1 WHERE position >= $1 AND position < $2`
	} else {
		query = `UPDATE features SET position = position - 1 WHERE position <= $1 AND position > $2`
	}
	if _, err := tx.Exec(context.Background(), query, newPos, currentPos); err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π")
		return
	}

	if _, err := tx.Exec(context.Background(), `UPDATE features SET position = $1 WHERE id = $2`, newPos, id); err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–∫–∏")
		return
	}

	if err := tx.Commit(context.Background()); err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
		return
	}

	sendMessage(bot, chatID, fmt.Sprintf("üì¶ –§–∏—à–∫–∞ #%d –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é %d", id, newPos))
	return
}

// --- –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é –ø–æ–∑–∏—Ü–∏—é ---
func handleMoveNewsCommand(bot *tgbotapi.BotAPI, chatID int64, text string) {
	parts := strings.Fields(text)
	if len(parts) != 3 {
		sendMessage(bot, chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /movenews {id} {–Ω–æ–≤–∞—è_–ø–æ–∑–∏—Ü–∏—è}")
		return
	}
	id, err1 := strconv.Atoi(parts[1])
	newPos, err2 := strconv.Atoi(parts[2])
	if err1 != nil || err2 != nil {
		sendMessage(bot, chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è")
		return
	}

	var currentPos int
	err := DB.QueryRow(context.Background(), `SELECT position FROM newses WHERE id = $1`, id).Scan(&currentPos)
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	if newPos == currentPos {
		sendMessage(bot, chatID, "‚ÑπÔ∏è –ù–æ–≤–æ—Å—Ç—å —É–∂–µ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏")
		return
	}

	tx, err := DB.Begin(context.Background())
	if err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return
	}
	defer tx.Rollback(context.Background())

	var query string
	if newPos < currentPos {
		query = `UPDATE newses SET position = position + 1 WHERE position >= $1 AND position < $2`
	} else {
		query = `UPDATE newses SET position = position - 1 WHERE position <= $1 AND position > $2`
	}
	if _, err := tx.Exec(context.Background(), query, newPos, currentPos); err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π")
		return
	}

	if _, err := tx.Exec(context.Background(), `UPDATE newses SET position = $1 WHERE id = $2`, newPos, id); err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏")
		return
	}

	if err := tx.Commit(context.Background()); err != nil {
		sendMessage(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
		return
	}

	sendMessage(bot, chatID, fmt.Sprintf("üì¶ –ù–æ–≤–æ—Å—Ç—å #%d –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é %d", id, newPos))
	return
}
